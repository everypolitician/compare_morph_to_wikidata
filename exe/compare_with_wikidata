#!/usr/bin/env ruby
require 'bundler/setup'
require 'daff'
require 'csv'

require 'compare_with_wikidata'

def daff_diff(data1, data2)
  t1 = Daff::TableView.new(data1)
  t2 = Daff::TableView.new(data2)

  alignment = Daff::Coopy.compare_tables(t1, t2).align

  data_diff = []
  table_diff = Daff::TableView.new(data_diff)

  flags = Daff::CompareFlags.new
  # We don't want any context in the resulting diff
  flags.unchanged_context = 0
  highlighter = Daff::TableDiff.new(alignment, flags)
  highlighter.hilite(table_diff)

  data_diff
end

def csv_from_url(file_or_url)
  if File.exist?(file_or_url)
    CSV.read(file_or_url)
  else
    CSV.parse(RestClient.get(file_or_url).to_s)
  end
end

if ARGV.size != 2
  abort "Usage: #{$PROGRAM_NAME} SPARQL_QUERY CSV_FILE_OR_URL
e.g. prompt 'SELECT (STRAFTER(STR(?item), STR(wd:)) AS ?id) (STRAFTER(STR(?officeholder), STR(wd:)) AS ?holder_id)
  WHERE {
    ?item wdt:P31 wd:Q6256 .
    OPTIONAL {
      ?item wdt:P1313 ?office .
      OPTIONAL { ?office wdt:P1308 ?officeholder . }
    }
  }
ORDER BY ?id' \\
https://gist.githubusercontent.com/chrismytton/ddb3974b056f92051370a28b27168bbe/raw/4d2286134a6f8a9a47fbeb546069535eff589ca3/heads-of-government-morph.csv
"
end

sparql_query, csv_file_or_url = ARGV
output_formatter = ENV.fetch('PROMPT_OUTPUT_FORMATTER', 'text')

wikidata_records = CompareWithWikidata::MembershipList::Wikidata.new(sparql_query: sparql_query).to_a

external_csv = csv_from_url(csv_file_or_url)

headers, *rows = daff_diff(wikidata_records, external_csv)

if output_formatter == 'text'
  CSV do |csv|
    csv << headers
    rows.each { |row| csv << row }
  end
elsif output_formatter == 'mediawiki'
  require 'erb'
  template = ERB.new(File.read(File.join(__dir__, '..', 'templates/mediawiki.erb')), nil, '-')
  puts template.result(binding)
end
